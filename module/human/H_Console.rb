#//////////////////////////////////////////////////////////////////////////////////
# H_Consoleモジュール
# --------------------- インクルードされるクラス -----------------------------------
#   Human_consoleクラス
# ---------------------------- 内容説明 ------------------------------------------
#   Human_consoleクラスの中から、コンソール出力が必要な処理の部分を集めた関数群
#//////////////////////////////////////////////////////////////////////////////////
module H_Console
  #################################################################################
  # 処理内容：
  #  人がどこの座標に置くか決める
  # 返り値:
  #  人が置く座標の情報
  #  { :point => 置ける座標,  :dir => ひっくり返せる向き }
  #################################################################################
  def select_point_info
    #---------------------------------------------------------------------------------------
    # 石が置ける座標を求める
    #---------------------------------------------------------------------------------------
    mobility_info = self.get_mobility_info

    #---------------------------------------------------------------------------------------
    # 入力された値をチェック用に一時保存する変数
    #---------------------------------------------------------------------------------------
    point = []

    #---------------------------------------------------------------------------------------
    # 正しい入力があるまで繰り返し
    #---------------------------------------------------------------------------------------
    puts '以下の箇所に置くことができます'
    mobility_info.each{|v| print 'x軸: ' + ['','a','b','c','d','e','f','g','h'][v[:point].x] + ', ' + 'y軸' + v[:point].y.to_s + "\n" }
    print ' どこに打ちますか? (x軸,y軸) ==> '
    while 1
      point = gets.chomp
      point = point.split(/,/)

      #---------------------------------------------------------------------------------------
      # カンマ区切りで　かつ 合計3文字の入力かチェック
      #---------------------------------------------------------------------------------------
      if point.length != 2 then
        puts '========================================='
        puts '入力はカンマ区切りで1文字づつです'
        puts 'もう一度入力してください。　入力例:  a,3'
        puts '========================================='
        print ' どこに打ちますか? (x軸,y軸) ==> '
        next
      end

      #---------------------------------------------------------------------------------------
      # a~hの値が入力されているかチェック
      #---------------------------------------------------------------------------------------
      if !(/[abcdefgh]/ =~ point[0]) then
        puts '========================================='
        puts '1つ目はa~hです'
        puts 'もう一度入力してください。　入力例:  a,3'
        puts '========================================='
        print ' どこに打ちますか? (x軸,y軸) ==> '
        next
      end

      #---------------------------------------------------------------------------------------
      # 1~8の値が入力されているかチェック
      #---------------------------------------------------------------------------------------
      if !(/[12345678]/ =~ point[1]) then
        puts '========================================='
        puts '2つ目は1~8です'
        puts 'もう一度入力してください。　入力例:  a,3'
        puts '========================================='
        print ' どこに打ちますか? (x軸,y軸) ==> '
        next
      end

      #---------------------------------------------------------------------------------------
      # a~hをboardの配列の位置に変換
      #---------------------------------------------------------------------------------------
      point[0] = {'a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5, 'f'=>6, 'g'=>7, 'h'=>8}[point[0]]
      point[1] = point[1].to_i

      #---------------------------------------------------------------------------------------
      # 石が置ける座標かどうか判断
      #---------------------------------------------------------------------------------------
      if mobility_info.map{|v| v[:point] }.find_all{|po| (po.x == point[0]) && (po.y == point[1]) } == [] then
        puts '========================================='
        puts 'そこには石が置けません                   '
        puts '========================================='
        print ' どこに打ちますか? (x軸,y軸) ==> '
        next
      end

      #---------------------------------------------------------------------------------------
      # すべてのチェックをくぐり抜けているとループを抜ける（正しい値を得た）
      #---------------------------------------------------------------------------------------
      break
    end

    return mobility_info.map.find{|v| v[:point].x == point[0] && v[:point].y == point[1] }
  end
end
