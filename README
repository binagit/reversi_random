[プログラムの説明]
　リバーシプログラムである。
　コンピュータは1手読みでランダムな座標に打ってくる。


[起動方法]
  $ ruby main_console.rb


[ログについて]
  ログはlogディレクトリの下に作られていく。
  ログレベルは、Conf.rbにDEBUGを指定している。
　プログラムのなかでもすべてDEBUGレベルによる
　出力を行なっているので、気に入らなければレベルを
　他のレベルに変えればよい。


[操作方法]
  BまたはWで黒または白を決定後、 a,5 のようにカンマ区切りで
  座標を指定する事で石を置いていく。


[終了方法]
  最後（石を置くおところが無くなった状況）までゲーム行なった場合、
　自動的に処理は終了するが途中で止めたい場合は、Ctr + c でプログ
  ラムを止める


[ディレクトリ構造]
　reversi_random トップディレクトリ
　 +-- README          リードミー
　 +-- main_console.rb プログラム起動ファイル
　 +-- log
　 |    `-- reversi_random.log  ログファイル
　 +-- class
　 |    |-- Com_console.rb    コンピュータを表すクラス
   |    |-- Conf.rb           設定ファイルを表すクラス
   |    |-- Human_console.rb  人を表すクラス
   |    |-- Point.rb          座標を表すクラス
   |    `-- System_console.rb システムを表すクラス
　 `-- module
        |-- com     Com_console.rbにのみ取り込まれるモジュールを入れたディレクトリ
        |    `-- AI_random.rb  ランダム打ちに必要な処理を集めたモジュール
        |-- common  複数のクラスに取り込まれるモジュールを入れたディレクトリ
        |    |-- Check.rb   石が置けるかどうかチェックする関数群を集めたモジュール
        |    `-- Update.rb  ボードを更新するための関数を集めたモジュール
        |-- human   Human_console.rbにのみ取り込まれるモジュールを入れたディレクトリ
        |    `-- H_Console.rb  Human_consoleクラスの中から、コンソール出力が必要な処理の部分を集めたモジュール
        `-- system  System_console.rbにのみ取り込まれるモジュールを入れたディレクトリ
             `-- S_Console.rb System_consoleクラスの中から、コンソール出力が必要な処理の部分を集めたモジュール


[ソース説明]
　人を表すクラスはHuman_consoleクラスであるが、コンソール出力に必要な処理は、
　H_Consoleモジュールに抜き出してある。
　同様に、システムを表すクラスからもコンソール出力に必要な処理は、S_Console.rb
　に抜き出されている。

　クラスは、多くの機能をモジュールによって追加される方針で作られている。
　これは複数のクラスで同じ処理をする関数がたくさん作られるからである。
　これら共通の関数群を抜き出してモジュールにしている。

　以上は、共通する項目についてモジュールにした例であるが、今回のプログラ
　ムにのみ起因する部分もモジュールとして抜き出している。
  例えば、コンソール出力に必要な関数を抜きだしたモジュールなどがそれである。
　将来、ブラウザで遊べるようにしたいとなった場合、このコンソールに必要なモ
  ジュールをインクールドするのをやめ、新しく作ったモジュールをインクルードし
　なおすだけで、それを可能にしようという発想からである。

　また、コンピュータの思考ルーチンに関する部分もモジュールとして抜き出してある。
　これも後から別の思考ルーチンを使いたいとなったばあいに、今使っているモジュール
　をインクルードするのをやめ、新しいモジュールをインクルードするだけで思考ルーチ
　ンが変わるようにするためである。


[クラス説明]
  Com_consoleクラス
    1手読み（ランダム打ち）を行なうコンピュータを表すクラス
    実際に石が置けるかどうかチェックするのはCheckモジュール   
    実際にボードの更新を行なうのはUpdateモジュール

  Human_consoleクラス
    人を表すクラス
    石を置く場所を入力してもらう処理を行なう
    実際には、H_ConsoleモジュールがCheckモジュールのチェックメソッドを使い、
    入力される値を求める

  System_consoleクラス
    システムを表すクラス
      ボードの更新
      ボードの表示
      人の先手、後手を決める
      ゲームの終了判定
       を行なう
 

  ＊以上の大まかなクラスがほとんどの処理を行なう。
　＊おおざっぱな流れとしては、人の手番では人クラスがが座標を決め、
  ＊その座標をシステムクラスに渡し、システムクラスがボードを裏返
  ＊す（更新する）。 コンピュータの手番ではコンピュータクラスが
  ＊座標を決め、その座標をシステムクラスに渡しシステムクラスが
　＊ボードを裏返す（更新する）という手順で行なわれる。


[インクルードしているモジュール]
  Com_consoleクラス
    - Checkモジュール
    - Updateモジュール    ＊今回は深読みしないので実はUpdateモジュールは使われていない
    - AI_randomモジュール


  Human_consoleクラス
    - Checkモジュール
    - H_Consoleモジュール


  System_consoleクラス
    - Checkモジュール
    - Updateモジュール
    - S_Consoleモジュール

